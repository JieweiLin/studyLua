 location /limittest {
             #如果是内部代理过来的请求，则需要继续用之前的链路ID
             set_by_lua_block $tid {
	                local headers=ngx.req.get_headers();
			        local tid = headers["traceId"] or ngx.var.tid ;
			        return tid;
	         }

             #拦截只配置到最终负载均衡的location
             access_by_lua_file ../lualib/authlua/rule-limit.lua;
             #设置链路ID，只配置到最终负载均衡的location
             proxy_set_header traceId $tid;
	         proxy_set_header HOST $host; 
	         proxy_set_header  X-Real-IP  $remote_addr;
	         proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
             client_max_body_size  100m;
	         proxy_connect_timeout 1; 
	         proxy_send_timeout 30; 
	         proxy_read_timeout 60; 
            
	         #设置输出
		 content_by_lua '
                        -- ngx.sleep(10);
			ngx.print("you success");
		 ';
	     

             #请求结束需把当前连接数减1.有配access_by_lua_file，则一定要配置这个
             log_by_lua_file  ../lualib/authlua/rule-conn-end.lua;

        }


	 

