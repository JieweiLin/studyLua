 server {
        listen       4088;
        server_name  localhost;
        charset utf-8;

   
        location /status {
            default_type text/html;
            content_by_lua '
                ngx.print("ok")
            ';
        }
        
        
        
        #当前规则
        location /curr_rule{
        
          default_type text/html;
          content_by_lua '
              
              local shared_data  = ngx.shared.shared_data;
              local json = require(require("ffi").os == "Windows" and "dkjson" or "cjson.safe")
			  local retTable = {}; 
          
          	  local rule_status = shared_data :get("rule_status");
				if rule_status ~= nil then -- 不为空，则要判断是否手动关闭了。默认是开启的.
				    retTable["rule_status"] = rule_status;
				else   
				    retTable["rule_status"] = 1;
				end
             
              local ruleVersion = shared_data :get("ruleVersion");
              retTable["ruleVersion"] = ruleVersion;
              if ruleVersion == nil then
          		  retTable["ruleVersion"] = 0;
              end
              retTable["ipblacklist"] = shared_data :get("ipblacklist");
	      retTable["ipwhitelist"] = shared_data :get("ipwhitelist");
              retTable["ipconnnum"] = shared_data :get("ip_conn_num");
              retTable["ipreqrate"] = shared_data :get("ip_req_rate");
              
              local offlineTable = {};
              
              local offline_req_list = shared_data :get("offline_req_list");
              offline_req_list = json.decode(offline_req_list);
              if offline_req_list ~= nil then
                for k2,word in pairs(offline_req_list) do
          
          		  offlineTable[word]=shared_data :get("offline_req_alertmsg_"..word);
		              
		        end
              
              end
              
              retTable["offlinelist"] = offlineTable;
              
              local limitRateTable = {};
              local limitMsgTable = {};
              
              
              local limit_req_list = shared_data :get("limit_req_list");
              limit_req_list = json.decode(limit_req_list);
              if limit_req_list ~= nil then
                for k2,word in pairs(limit_req_list) do
          
          		  limitRateTable[word]=shared_data :get("limit_req_rate_"..word);
		          limitMsgTable[word]=shared_data :get("limit_req_alertmsg_"..word);
		          
		        end
              
              end
              
              
              retTable["limitRateTable"] = limitRateTable;
              retTable["limitMsgTable"] = limitMsgTable;
              
              
              
              ngx.print(json.encode(retTable));
              
          
          ';
        }
        
         #规则设置脚本
        location /rule/status {
	       default_type text/html;
	       lua_code_cache on;
	       content_by_lua_block {
	          local shared_data  = ngx.shared.shared_data;
	            local cmd = ngx.var.arg_cmd;

		--打开限流降级规则
		if cmd == 'openrule' then

		ngx.log(ngx.INFO,"打开限流降级规则");
		shared_data :set("rule_status", 1);
		ngx.print("ok");

		--关闭限流降级规则
		elseif cmd == 'closerule' then

		ngx.log(ngx.INFO,"关闭限流降级规则");
		shared_data :set("rule_status", 0);
		ngx.print("ok");

		end
	       
	       
	       }
        } 
        
        #刷新规则,即去除本地规则缓存
        location /rule/refresh{
           default_type text/html;
           content_by_lua '
               local rule = require("authlua.rule")
               local shared_data  = ngx.shared.shared_data;
           	   shared_data :set("hasinit", false); --让内存重新初始化
           	   -- 初始化规则到内存
			   rule.init();
		       ngx.print("ok");
           ';
        }
        
}