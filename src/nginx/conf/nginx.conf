#user  nobody;
worker_processes  8;

pid  /data/nginxlogs/nginx.pid;
error_log  /data/nginxlogs/ztjy/error.log error;
error_log  /data/nginxlogs/ztjy/warn.log warn;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#限流日志
error_log  logs/crit.log  crit;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  'application/json; charset=utf-8';
    server_tokens  off;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent $request_time "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" $http_cookie "$request_body"';

    log_format json '{'
    		    '"sessionId":"$cookie_JSESSIONID",'
   		     '"request_body":"$request_body",'
    		    '"resp_body":"$resp_body",'
    		    '"tid":"$tid",'
   		     '"status":$status}';

    #AMS、HMS访问日志接入ELK的格式
    log_format web_json '{'
		'"sessionId":"$cookie_JSESSIONID",'
		'"request_body":"$request_body",'
		'"resp_body":"$resp_body",'
		'"uri":"$request_uri",'
		'"tid":"$tid",'
		'"status":$status}';

    log_format stat_access '{'
		'"server_addr":"$server_addr",'
		'"tid":"$tid",'
		'"remote_addr":"$proxy_add_x_forwarded_for",'
		'"start_time":"$start_time",'
		'"end_time":"$msec",'
		'"uri":"$request_uri",'
		'"reqcode":"$reqcode",'
		'"upstream_addr":"$upstream_addr",'
		'"upstream_response_time":"$upstream_response_time",'
		'"sessionid":"$cookie_JSESSIONID",'
		'"status":$status}';

    access_log logs/ztjy_app_access.log json;
    resolver 10.143.22.116;
#启动初始化规则内存

init_worker_by_lua_block {
	if ngx.worker.id() ~= 0 then  --只取0号初始化
	return
	end
	ngx.log(ngx.INFO,ngx.worker.id().."启动初始化...");
	local delay =0
	local handler
	handler = function (premature)
	-- do some routine job in Lua just like a cron job
	local rule = require("authlua.rule")
	ngx.log(ngx.INFO,ngx.worker.id().."定时器执行啦...");
	rule.init();

	if premature then
	return
	end
	end

	local ok, err = ngx.timer.at(delay, handler)
	if not ok then
	ngx.log(ngx.ERR, "启动初始化规则失败 ", err)
	return
	end

	-- 定时加载失效token列表
local function close_db(db)  
		    if not db then  
			return  
		    end  
		    db:close()  
		end  

		local mysql = require("resty.mysql")  
		local jwtConfig = require "authlua.jwt_config"
           
            local shared_data  = ngx.shared.invalid_token_store;
	  

            local beginId = nil;

	     


             local delay1 =5;
             local pageSize = 2000;
             local failNum = 1;
             local firstSelect = true;
             local handler1;
		handler1 = function (premature,param)
		    -- do some routine job in Lua just like a cron job
		    if premature then
			return
		    end




                    local db, err = mysql:new()  
			if not db then  
			     ngx.log(ngx.ERR,"连接mysql失败 : ", err)  
			     ngx.timer.at(delay1, handler1);
			    return  
			end  

			db:set_timeout(5000)  

			
			local props = {  
			   host = jwtConfig.getHost(),  
		    port = jwtConfig.getPort(),
		    database = jwtConfig.getDatabase(),  
		    user = jwtConfig.getUser(),  
		    password = jwtConfig.getPassword() 
			}  

			local res, err, errno, sqlstate = db:connect(props)  

			if not res then  
			    ngx.log(ngx.ERR,"创建mysql连接失败","connect to mysql error : ", err, " , errno : ", errno, " , sqlstate : ", sqlstate)  
			    ngx.timer.at(delay1, handler1)
			   return close_db(db)  
			end  

                      
			local t = os.date("%Y-%m-%d %H:%M:%S",os.time());


			local select_sql = nil;
                        
			if beginId == nil then
			  select_sql = "select min(id) as id from t_kick_token where expire_time >= '"..t.."' "  ;
			   ngx.log(ngx.INFO,"加载失效token,用时间查",t);
			else
                           select_sql = "select id, token_id,expire_time from t_kick_token where id >= '"..beginId.."' limit "..pageSize..""  ;
				 ngx.log(ngx.INFO,"加载失效token,用ID查",beginId);
			end

                        ngx.log(ngx.INFO,"加载失效token,SQL语句：",select_sql);
			res, err, errno, sqlstate = db:query(select_sql)  
			if not res then  
			  
			    ngx.log(ngx.ERR,"加载失效token失败,tokenId=","select error : ", err, " , errno : ", errno, " , sqlstate : ", sqlstate);
                            failNum = failNum*2;
                             ngx.log(ngx.ERR,"加载失效token定时器间隔修改为",delay1*failNum,"秒");
			    ngx.timer.at(delay1*failNum, handler1)
			   return close_db(db)  
			end  


			for i, row in ipairs(res) do  

                          if row.id == ngx.null then
                              ngx.log(ngx.INFO,"未找到失效token最小ID" )  ;
                              break;
                          end


			  if firstSelect then
                             beginId =  row.id;
                              ngx.log(ngx.INFO,"查找到失效token最小ID： ", row.id )  ;
                              firstSelect = false;
                          else

			   ngx.log(ngx.INFO,"查找到失效token： ", row.id ,"  ",row.token_id)  
				
                               -- 过期时间比当前时间大的设置到缓存里面
                               if row.expire_time >= t then
                                    ngx.log(ngx.INFO,"设置到缓存token： ", row.id ,"  ",row.token_id)  
				shared_data :set(row.token_id, true);
                               end

                                -- 加1，因为上面用的是大于等于，防止每次都查到最后一条数据
                                 beginId =  row.id+1;

				 ngx.log(ngx.INFO,"加载失效token成功,tokenId=",row.token_id);
                           
                           end


			end  
                       -- 重置失败次数
                       failNum = 1;
                       ngx.timer.at(delay1, handler1)
		       close_db(db)  

		  
		end

                -- delay1秒后启动定时器，如果定时器逻辑异常，删除此段代码即可。
		local ok, err = ngx.timer.at(delay1, handler1)



}


    sendfile        on;
    client_max_body_size 100m;
    client_body_buffer_size 1024k;
    proxy_connect_timeout 300;
    proxy_read_timeout 300;
    proxy_send_timeout 300;
    proxy_buffer_size 64k;
    proxy_buffers   4 512k;
    proxy_busy_buffers_size 1024k;
    proxy_temp_file_write_size 1024k;
    fastcgi_buffers 8 128k;
    send_timeout 60;
    keepalive_timeout  65;
    proxy_ignore_client_abort on ;
 
    #引入规则配置文件
    include  rule/rule.conf;
    #定义规则占用内存
    lua_shared_dict shared_data 10m;
    #请求限流内存
    lua_shared_dict limit_req_store 200m;
    #IP连接数限制内存
    lua_shared_dict limit_conn_store 200m;
    #失效token列表
    lua_shared_dict invalid_token_store 200m;

    #gzip  on;
    include upstream.conf;
    include 4080.conf;
}
