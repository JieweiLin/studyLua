require("authlua.redis_config")
local redis = require("authlua.redis_iresty")
local shared_data  = ngx.shared.shared_data;

local hasinit = shared_data :get("hasinit");
ngx.log(ngx.INFO,"是否初始化过呢",hasinit);


-- 字符串切割函数开始
local function lua_string_split(str, split_char)      
 local sub_str_tab = {}; 
   
 while (true) do          
 local pos = string.find(str, split_char);    
 if (not pos) then              
  local size_t = table.getn(sub_str_tab)  
  table.insert(sub_str_tab,size_t+1,str);  
  break;    
 end  
   
 local sub_str = string.sub(str, 1, pos - 1);                
 local size_t = table.getn(sub_str_tab)  
 table.insert(sub_str_tab,size_t+1,sub_str);  
 local t = string.len(str);  
 str = string.sub(str, pos + 1, t);     
 end      
 return sub_str_tab;  
end 
-- 字符串切割函数结束

if not hasinit then

   shared_data:flush_all(); --清空内存数据
   
   ngx.log(ngx.INFO,"初始化权限策略...");

   local redisConfig = require "authlua.redis_config"
   local redis = require("authlua.redis_iresty")
   
   -- 加载IP黑名单
   local opts = {timeout=redisConfig.getTimeOut(),ip=redisConfig.getIp(),port=redisConfig.getPort(),pwd=redisConfig.getPwd()};
   local red = redis:new(opts);
   
   local res,err = red:smembers("ipblacklist");
   if not res then
      ngx.log(ngx.ERR,"加载IP黑名单失败", err)
  else
  
    for k2,word in pairs(res) do
      
      shared_data :set("ipblack"..word, true);
          
    end
    
     ngx.log(ngx.INFO,"加载IP黑名单成功");
  
  end
  
  
  -- 加载url黑名单
   local res,err = red:smembers("urlblacklist");
   if not res then
      ngx.log(ngx.ERR,"加载url黑名单失败", err)
  else
  
    for k2,word in pairs(res) do
      
      shared_data :set("urlblack"..word, true);
          
    end
    
     ngx.log(ngx.INFO,"加载url黑名单成功");
  
  end
  
  
  -- 加载协议黑名单
  local res,err = red:smembers("reqcodeblacklist");
   if not res then
      ngx.log(ngx.ERR,"加载协议黑名单失败",err);
  else
  
    for k2,word in pairs(res) do
      
      local res, err = red:get("reqcodeblack:"..word)
      shared_data :set("reqcodeblack"..word, res);
          
    end
    
     ngx.log(ngx.INFO,"加载协议黑名单成功");
  
  end
  
  -- 加载流控信息   协议编号|倒霉数|返回内容, 协议编号|倒霉数|返回内容
  local res,err = red:get("fluidcontrol");
  if not res then
      ngx.log(ngx.ERR,"加载流控信息失败",err);
  else
    
         local fluidinfos  = lua_string_split(res,"*")  ;
         local size1 = table.getn(fluidinfos)  ;
        for i = 1,size1,1 do  
           if fluidinfos[i] ~= '' then
           
                local fluidinfo = fluidinfos[i];
                ngx.log(ngx.ERR,"单条流内容"..fluidinfo);
                
               local fluidinfoElements = lua_string_split(fluidinfo,"|")  ;
                ngx.log(ngx.ERR,"协议编号",fluidinfoElements[1]);
                ngx.log(ngx.ERR,"倒霉数",fluidinfoElements[2]);
                ngx.log(ngx.ERR,"返回内容",fluidinfoElements[3]);
               
               local s1 = "fluidinfo_dms_"..fluidinfoElements[1];
              ngx.log(ngx.ERR,"设置倒霉数的串",s1);
               
               shared_data :set("fluidinfo_dms_"..fluidinfoElements[1],fluidinfoElements[2]);
               shared_data :set("fluidinfo_fhnr_"..fluidinfoElements[1],fluidinfoElements[3]);
               
           end
        end 
    
  end
  
  shared_data :set("hasinit", true);
   
end

   ngx.log(ngx.INFO,"执行策略过滤");
   -- 判断IP黑名单

   local ip = ngx.var.remote_addr;
   ngx.log(ngx.INFO,"用户IP:"..ip);

   local res = shared_data :get("ipblack"..ip);

   if res then
      ngx.log(ngx.INFO,"IP在黑名单，被拒绝".. ip)
      return ngx.exit(ngx.HTTP_FORBIDDEN);
   end

  -- 判断地址黑名单
  local url = ngx.var.document_uri ;
  local res = shared_data :get("urlblack"..url);
 ngx.log(ngx.INFO,"请求地址:".. url);
   if res then
      ngx.log(ngx.INFO,"地址在黑名单，被拒绝".. url)
      ngx.print("{\"returncode\":\"0\",\"message\":\"系统繁忙,请稍候再试\",\"body\":\"\"}");
        return;
   end

    -- 判断协议黑名单
    
    ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
    local arg = ngx.req.get_post_args()
    
    local json = require(require("ffi").os == "Windows" and "dkjson" or "cjson")
    local reqcode = 0;
    
    -- 防止无参数报错
    if  arg then
              for k,v in pairs(arg) do
                
                        if k == 'reqcode' then 
                          reqcode = v;
                        end
              end
    end
    
    local res = shared_data :get("reqcodeblack"..reqcode);

    if  res then
        ngx.log(ngx.INFO,"协议",reqcode,"在黑名单,返回内容是:", res);
        ngx.print(res);
        return;
    end
    
    local sss = "fluidinfo_dms_"..reqcode;
     ngx.log(ngx.ERR,"倒霉数的串",sss);
    -- 进行流控
    local  dms = shared_data :get(sss);
    ngx.log(ngx.ERR,"倒霉数",dms);
    
    if dms ~= nil then
    
         local accessnum = shared_data :get("accessnum_"..reqcode);
        
        if accessnum == nil then
           accessnum = 0;
        end
        
        accessnum = accessnum+1;
        
        if  accessnum > 100000 then
        
              accessnum = 0;
          
        end
        
         shared_data :set("accessnum_"..reqcode,accessnum);
        
         ngx.log(ngx.ERR,"访问第X次：",accessnum);
        
        -- 倒霉
        if accessnum%dms == 0 then
                ngx.print(shared_data :get("fluidinfo_fhnr_"..reqcode));
                return;
        end
    
    
    
    end
    
    
-- 打印埋点traceId

local traceId = ngx.var.tid;
ngx.log(ngx.CRIT,"start--traceId:"..traceId);


